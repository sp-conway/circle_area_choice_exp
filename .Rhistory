)
d_counts <- d %>%
group_by(sub_n,distance,set,choice_tdc) %>%
summarise(n=n()) %>%
ungroup() %>%
pivot_wider(names_from = choice_tdc, values_from = n, values_fill = 0) %>%
left_join(subs_key) %>%
relocate(sub_n_new,.after=sub_n)
tw <- dw <- if_else(d_counts$set=="w",1,0) # target and decoy always oriented the same
cw <- if_else(d_counts$set=="h",1,0) # if target h then comp w and vice versa
distance5 <- if_else(d_counts$distance==5,1,0)
distance9 <- if_else(d_counts$distance==9,1,0)
distance14 <- if_else(d_counts$distance==14,1,0)
sub_ns_new <- d_counts$sub_n_new
N <- nrow(d_counts)
J <- n_subs
stan_data <- list(
tw=tw,
cw=cw,
dw=dw,
sub_ns_new=sub_ns_new,
N=N,
J=J,
distance5=distance5,
distance9=distance9,
distance14=distance14,
choice_counts=choice_counts
)
choice_counts <- as.matrix(d_counts[,c("target","competitor","decoy")])
choice_counts <- as.matrix(d_counts[,c("target","competitor","decoy")])
stan_data <- list(
tw=tw,
cw=cw,
dw=dw,
sub_ns_new=sub_ns_new,
N=N,
J=J,
distance5=distance5,
distance9=distance9,
distance14=distance14,
choice_counts=choice_counts
)
rm(list=ls())
library(tidyverse)
library(here)
library(fs)
library(glue)
library(cmdstanr)
set_cmdstan_path(here("cmdstan-2.36.0"))
which_cond <- "triangle"
which_model <- "bayes_choice_1"
stan_dir <- here("analysis","bayes_choice","stan")
stan_file <- path(stan_dir,glue("{which_model}.stan"))
d <- here("data","choice","aggregated","choice_all.csv") %>%
read_csv() %>%
filter(str_detect(effect,"attraction") &
str_detect(disp_cond,"triangle")) %>%
mutate(choice_tdc=factor(choice_tdc,
levels=c("target","competitor","decoy")))
n_subs <- length(unique(d$sub_n))
subs_key <- tibble(
sub_n = sort(unique(d$sub_n)),
sub_n_new = seq(1,n_subs,1)
)
d_counts <- d %>%
group_by(sub_n,distance,set,choice_tdc) %>%
summarise(n=n()) %>%
ungroup() %>%
pivot_wider(names_from = choice_tdc, values_from = n, values_fill = 0) %>%
left_join(subs_key) %>%
relocate(sub_n_new,.after=sub_n)
tw <- dw <- if_else(d_counts$set=="w",1,0) # target and decoy always oriented the same
cw <- if_else(d_counts$set=="h",1,0) # if target h then comp w and vice versa
distance5 <- if_else(d_counts$distance==5,1,0)
distance9 <- if_else(d_counts$distance==9,1,0)
distance14 <- if_else(d_counts$distance==14,1,0)
sub_ns_new <- d_counts$sub_n_new
N <- nrow(d_counts)
J <- n_subs
choice_counts <- as.matrix(d_counts[,c("target","competitor","decoy")])
stan_data <- list(
tw=tw,
cw=cw,
dw=dw,
sub_ns_new=sub_ns_new,
N=N,
J=J,
distance5=distance5,
distance9=distance9,
distance14=distance14,
choice_counts=choice_counts
)
?sample
n_iter <- 2500
n_chain <- n_core <- 4
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
results_dir <- path(here("analysis","bayes_choice",which_mode))
results_dir <- here("analysis","bayes_choice",which_model)
dir_create(results_dir)
source("/work/pi_alc_umass_edu/spconway/scratch/circle_area_choice_exp/analysis/bayes_choice.R", echo=TRUE)
source("/work/pi_alc_umass_edu/spconway/scratch/circle_area_choice_exp/analysis/bayes_choice.R", echo=TRUE)
source("/work/pi_alc_umass_edu/spconway/scratch/circle_area_choice_exp/analysis/bayes_choice.R", echo=TRUE)
?sample
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
if(length(dir_ls(results_dir,regexp="bayes_choice"))==0){
m <- cmdstan_model(stan_file)
fit <- m$sample(data=stan_data,
chains=n_chain,
parallel_chains=n_chain,
refresh=100,
iter_sampling=n_iter,
output_dir=results_dir,
output_basename="bayes_choice")
try(fit$save_object(file=path(results_dir,"fit.RDS")))
save(stan_data,choice_counts,subs,key,file=path(results_dir,"data_for_model.RData"))
}
source("/work/pi_alc_umass_edu/spconway/scratch/circle_area_choice_exp/analysis/bayes_choice.R", echo=TRUE)
source("/work/pi_alc_umass_edu/spconway/scratch/circle_area_choice_exp/analysis/bayes_choice.R", echo=TRUE)
source("/work/pi_alc_umass_edu/spconway/scratch/circle_area_choice_exp/analysis/bayes_choice.R", echo=TRUE)
source("/work/pi_alc_umass_edu/spconway/scratch/circle_area_choice_exp/analysis/bayes_circle_area.R", echo=TRUE)
# setup =================================================================================
rm(list=ls())
library(here)
library(tidyverse)
library(fs)
library(glue)
library(posterior)
library(bayesplot)
library(cmdstanr)
set_cmdstan_path(here("cmdstan-2.36.0"))
# Control parameters
outliers_removed <- T
testing <- F
if(testing){
n_chain <- n_core <- 4
n_iter <- 100
}else{
n_chain <- n_core <- 4
n_iter <- 2500
}
# looping through conditions so I can just run all at once on unity
for(which_cond in c("triangle","horizontal")){
for(which_model in c("sigma_constant","sigma_constant_target_effect")){
# Output directory
results_dir <- here("analysis","bayes",glue("{which_model}/{which_cond}/{tmp}",tmp=ifelse(outliers_removed,"no_outliers","with_outliers")))
dir_create(results_dir)
# get stan code file =========================================================================
stan_file <- here("analysis","bayes","stan",glue("bayes_circle_area_{which_model}.stan"))
# read in data ================================================================================
dat_all <- here("data","circle_area","aggregated") %>%
dir_ls(regexp = ifelse(outliers_removed,"no_outliers.csv","with_outliers")) %>%
read_csv() %>%
filter(str_detect(disp_cond,which_cond))
n_subs <- length(unique(dat_all$sub_n))
# writing out model equation ============================================================
# subject i
# trial j
# stimulus k
# mu_ijk = (b0+s0_i) + (bw*w_ijk) + (bdiag2*diag2_ij) +
#           (bdiag3*diag3_ij) +
#           (bd5*distance5_ij) +
#           (bd9*distance9_ij) +
#           (bd14*distance14_ij) +
#           (bd2d*distance2d_ijk)+
#           ( (bd5+bd5d)*distance5d_ijk) +
#           ( (bd9+bd9d)*distance9d_ijk) +
#           ( (bd14+bd14d)*distance14d_ijk)
# prep data for stan ======================================================================
# assigning "new" subject numbers, just so they start at 1 and go up by 1 sequentially
# this is the "key"
subs_key <- tibble(
sub_n = sort(unique(dat_all$sub_n)),
sub_n_new = seq(1,n_subs,1)
)
# assign new subject numbers from key
# also mean center log area
dat_all_clean <- dat_all %>%
left_join(subs_key) %>%
relocate(sub_n_new,.after=sub_n) %>%
arrange(sub_n_new, block_n, trial_n)%>%
pivot_longer(c(t,d,c),values_to = "la") %>%
mutate(la_cent=la-mean(la)) %>% # MEAN CENTER LOG AREA
select(-la) %>%
pivot_wider(names_from = name,values_from = la_cent)
# figure out total number of trials
n_trials <- nrow(dat_all_clean)
n_trials_per_sub <- dat_all_clean %>%
group_by(sub_n_new) %>%
summarise(n=n()) %>%
ungroup() %>%
pull(n)
# data for stan
sub_n_new <- dat_all_clean$sub_n_new
wt <- wd <- as.integer(dat_all_clean$set=="w") # w - t & d are wide
wc <- as.integer(dat_all_clean$set=="h") # h - c is wide
diag2 <- as.integer(dat_all_clean$diag==2) # middle diagonal
diag3 <- as.integer(dat_all_clean$diag==3) # upper diagonal
dist2d <- as.integer(dat_all_clean$distance==2) # distance = 2, only applies for decoy
dist5 <- as.integer(dat_all_clean$distance==5) # distance = 5
dist9 <- as.integer(dat_all_clean$distance==9) # distance = 9
dist14 <- as.integer(dat_all_clean$distance==14) # distance = 14
la_cent <- cbind(dat_all_clean$t, # log area - centered
dat_all_clean$c,
dat_all_clean$d)
dists_all <- recode(dat_all$distance, `2`=1,`5`=2,`9`=3,`14`=4)
n_dists <- 4
# put all data in list object for stan
#if(which_model=="sigma_constant"){
stan_data <- list(
n_trials=n_trials,
n_subs=n_subs,
sub_n_new=sub_n_new,
wt=wt,
wc=wc,
wd=wd,
diag2=diag2,
diag3=diag3,
dist5=dist5,
dist9=dist9,
dist14=dist14,
dist2d=dist2d,
la_cent=la_cent
)
#}else{
#  stan_data <- list(
#   n_trials=n_trials,
#   n_subs=n_subs,
#   sub_n_new=sub_n_new,
#   wt=wt,
#   wc=wc,
#   wd=wd,
#   diag2=diag2,
#   diag3=diag3,
#  dist5=dist5,
#  dist9=dist9,
#  dist14=dist14,
#  dist2d=dist2d,
#  la_cent=la_cent
#)
#}
save(dat_all_clean,
stan_data,
n_trials,
n_trials_per_sub,
subs_key,
file=path(results_dir,"dat_for_model.RDS"))
# compile model and sample from posterior ============================================================
if(length(dir_ls(results_dir,regexp="bayes_circle_area"))==0){
m <- cmdstan_model(stan_file)
fit <- m$sample(data=stan_data,
chains=n_chain,
parallel_chains=n_chain,
refresh=100,
iter_sampling=n_iter,
output_dir=results_dir,
output_basename=ifelse(testing,"DELETE","bayes_circle_area"))
if(!testing) try(fit$save_object(file=path(results_dir,"fit.RDS")))
}
}
}
which_cond
which_model
# get stan code file =========================================================================
stan_file
# read in data ================================================================================
dat_all <- here("data","circle_area","aggregated") %>%
dir_ls(regexp = ifelse(outliers_removed,"no_outliers.csv","with_outliers")) %>%
read_csv() %>%
filter(str_detect(disp_cond,which_cond))
n_subs <- length(unique(dat_all$sub_n))
# prep data for stan ======================================================================
# assigning "new" subject numbers, just so they start at 1 and go up by 1 sequentially
# this is the "key"
subs_key <- tibble(
sub_n = sort(unique(dat_all$sub_n)),
sub_n_new = seq(1,n_subs,1)
)
# assign new subject numbers from key
# also mean center log area
dat_all_clean <- dat_all %>%
left_join(subs_key) %>%
relocate(sub_n_new,.after=sub_n) %>%
arrange(sub_n_new, block_n, trial_n)%>%
pivot_longer(c(t,d,c),values_to = "la") %>%
mutate(la_cent=la-mean(la)) %>% # MEAN CENTER LOG AREA
select(-la) %>%
pivot_wider(names_from = name,values_from = la_cent)
# figure out total number of trials
n_trials <- nrow(dat_all_clean)
n_trials_per_sub <- dat_all_clean %>%
group_by(sub_n_new) %>%
summarise(n=n()) %>%
ungroup() %>%
pull(n)
# data for stan
sub_n_new <- dat_all_clean$sub_n_new
wt <- wd <- as.integer(dat_all_clean$set=="w") # w - t & d are wide
wc <- as.integer(dat_all_clean$set=="h") # h - c is wide
diag2 <- as.integer(dat_all_clean$diag==2) # middle diagonal
diag3 <- as.integer(dat_all_clean$diag==3) # upper diagonal
dist2d <- as.integer(dat_all_clean$distance==2) # distance = 2, only applies for decoy
dist5 <- as.integer(dat_all_clean$distance==5) # distance = 5
dist9 <- as.integer(dat_all_clean$distance==9) # distance = 9
dist14 <- as.integer(dat_all_clean$distance==14) # distance = 14
la_cent <- cbind(dat_all_clean$t, # log area - centered
dat_all_clean$c,
dat_all_clean$d)
dists_all <- recode(dat_all$distance, `2`=1,`5`=2,`9`=3,`14`=4)
n_dists <- 4
# put all data in list object for stan
#if(which_model=="sigma_constant"){
stan_data <- list(
n_trials=n_trials,
n_subs=n_subs,
sub_n_new=sub_n_new,
wt=wt,
wc=wc,
wd=wd,
diag2=diag2,
diag3=diag3,
dist5=dist5,
dist9=dist9,
dist14=dist14,
dist2d=dist2d,
la_cent=la_cent
)
#   wd=wd,
#   diag2=diag2,
#   diag3=diag3,
#  dist5=dist5,
#  dist9=dist9,
#  dist14=dist14,
#  dist2d=dist2d,
#  la_cent=la_cent
#)
#}
save(dat_all_clean,
stan_data,
n_trials,
n_trials_per_sub,
subs_key,
file=path(results_dir,"dat_for_model.RDS"))
m <- cmdstan_model(stan_file)
stan_file
m <- cmdstan_model(stan_file)
.Last.error
fit <- m$sample(data=stan_data,
chains=n_chain,
parallel_chains=n_chain,
refresh=100,
iter_sampling=n_iter,
output_dir=results_dir,
output_basename=ifelse(testing,"DELETE","bayes_circle_area"))
m <- cmdstan_model(stan_file)
m <- cmdstan_model(stan_file)
# setup ====================================================================================================
rm(list=ls())
library(tidyverse)
library(here)
library(fs)
library(glue)
library(cmdstanr)
library(bayesplot)
# control settings
which_model <- "bayes_choice_1"
# sampler settings
n_chain <- n_core <- 4
n_iter <- 2500
# set path to cmdstan
set_cmdstan_path(here("cmdstan-2.36.0"))
which_cond <- "triangle"
stan_dir <- here("analysis","bayes_choice","stan")
stan_file <- path(stan_dir,glue("{which_model}.stan"))
results_dir <- here("analysis","bayes_choice",which_model,which_cond)
dir_create(results_dir)
# load and prep data ====================================================================================================
d <- here("data","choice","aggregated","choice_all.csv") %>%
read_csv() %>%
filter(str_detect(effect,"attraction") &
str_detect(disp_cond,which_cond)) %>%
mutate(choice_tdc=factor(choice_tdc,
levels=c("target","competitor","decoy")))
n_subs <- length(unique(d$sub_n))
subs_key <- tibble(
sub_n = sort(unique(d$sub_n)),
sub_n_new = seq(1,n_subs,1)
)
d_counts <- d %>%
group_by(sub_n,distance,set,choice_tdc) %>%
summarise(n=n()) %>%
ungroup() %>%
pivot_wider(names_from = choice_tdc, values_from = n, values_fill = 0) %>%
left_join(subs_key) %>%
relocate(sub_n_new,.after=sub_n)
tw <- dw <- if_else(d_counts$set=="w",1,0) # target and decoy always oriented the same
cw <- if_else(d_counts$set=="h",1,0) # if target h then comp w and vice versa
distance5 <- if_else(d_counts$distance==5,1,0)
distance9 <- if_else(d_counts$distance==9,1,0)
distance14 <- if_else(d_counts$distance==14,1,0)
sub_ns_new <- d_counts$sub_n_new
N <- nrow(d_counts)
J <- n_subs
choice_counts <- as.matrix(d_counts[,c("target","competitor","decoy")])
stan_data <- list(
tw=tw,
cw=cw,
dw=dw,
sub_ns_new=sub_ns_new,
N=N,
J=J,
distance5=distance5,
distance9=distance9,
distance14=distance14,
choice_counts=choice_counts
)
fit <- read_cmdstan_csv(dir_ls(results_dir,regexp = ".csv"))
save(stan_data,choice_counts,subs_key,file=path(results_dir,"data_for_model.RData"))
fit_summary <- fit$summary(variables=c("b_0","b_target","b_comp","b_distance5","b_distance9","b_distance14","b_target_distance5","b_target_distance9","b_target_distance14",
"b_w","b_0_s_sigma","b_w_s_sigma","b_comp_s_sigma","b_target_s_sigma","b_distance_s_sigma","b_targetcomp_distance_intxn_s_sigma"),
mean, median, sd,
~quantile(.x, probs=c(.025,.975)))
# params change by the model, so need to manually assign relevant parameters to plot
if(which_model=="bayes_choice_1"){
par_sets <- list(
"lp"=c("lp__"),
"b_0"=c("b_0"),
"b_target_comp"=c("b_target","b_comp"),
"b_distance"=c("b_distance5","b_distance9","b_distance14"),
"b_comp_distance"=c("b_comp_distance5","b_comp_distance9","b_comp_distance14"),
"b_target_distance"=c("b_target_distance5","b_target_distance9","b_target_distance14"),
"b_w"="b_w",
"sigma_all"=c("b_0_s_sigma","b_w_s_sigma","b_comp_s_sigma","b_target_s_sigma","b_distance_s_sigma","b_targetcomp_distance_intxn_s_sigma")
)
}
n_par_sets <- length(par_sets)
for(p in 1:n_par_sets){
par_names <- names(par_sets)[p]
pars <- par_sets[[p]]
try({
mcmc_trace(post,pars=pars)
ggsave(filename=path(results_dir,glue("{par_names}_trace.jpeg")),width=5,height=5)
})
try({
mcmc_dens(post,pars=pars)
ggsave(filename=path(results_dir,glue("{par_names}_dens.jpeg")),width=5,height=5)
})
try({
mcmc_dens_chains(post,pars=pars)
ggsave(filename=path(results_dir,glue("{par_names}_dens_chains.jpeg")),width=5,height=5)
})
try({
mcmc_hist(post,pars=pars)
ggsave(filename=path(results_dir,glue("{par_names}_hist.jpeg")),width=5,height=5)
})
try({
mcmc_intervals(post,pars=pars)
ggsave(filename=path(results_dir,glue("{par_names}_intervals.jpeg")),width=5,height=5)
})
}
post <- as.array(fit)$post_warmup_draws
color_scheme_set('red')
n_par_sets <- length(par_sets)
for(p in 1:n_par_sets){
par_names <- names(par_sets)[p]
pars <- par_sets[[p]]
try({
mcmc_trace(post,pars=pars)
ggsave(filename=path(results_dir,glue("{par_names}_trace.jpeg")),width=5,height=5)
})
try({
mcmc_dens(post,pars=pars)
ggsave(filename=path(results_dir,glue("{par_names}_dens.jpeg")),width=5,height=5)
})
try({
mcmc_dens_chains(post,pars=pars)
ggsave(filename=path(results_dir,glue("{par_names}_dens_chains.jpeg")),width=5,height=5)
})
try({
mcmc_hist(post,pars=pars)
ggsave(filename=path(results_dir,glue("{par_names}_hist.jpeg")),width=5,height=5)
})
try({
mcmc_intervals(post,pars=pars)
ggsave(filename=path(results_dir,glue("{par_names}_intervals.jpeg")),width=5,height=5)
})
}
p <- extract(post,"p")
# load in fit
fit <- readRDS(path(results_dir,"fit.RDS"))
x <- fit$draws(variables="p")
